services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - user-service
    networks:
      - api_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  user-service:
    build: 
      context: .
      dockerfile: user-service\Dockerfile
    expose:
      - "8000"
    volumes:
      - ./src:/app/src
    environment:
      - PYTHONPATH=/app/src
      - DATABASE_URL=postgresql://user:userpass@user-db/userdb
      - REDIS_URL=redis://user-cache:6379/0
      - SECRET_KEY=dev-secret-key
      - DEBUG=1
      - CORS_ORIGINS=["http://localhost", "http://localhost:3000"]
    depends_on:
      - user-db
      - user-cache
    networks:
      - api_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=userpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 30s
      timeout: 5s
      retries: 3

  user-cache:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  api_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: